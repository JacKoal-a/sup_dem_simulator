import 'dart:io';

import 'package:file_picker/file_picker.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:pdf/pdf.dart';
// ignore: depend_on_referenced_packages
import 'package:pdf/widgets.dart' as pw;
import 'package:printing/printing.dart';

class Export extends StatefulWidget {
  const Export(this.data, this.model, {Key? key}) : super(key: key);
  final String model;
  final List<List<String>> data;
  @override
  State<Export> createState() => _ExportState();
}

class _ExportState extends State<Export> with AutomaticKeepAliveClientMixin<Export> {
  pw.Document doc = pw.Document();

  @override
  void initState() {
    super.initState();
  }

  void _makePDF() async {
    final imageLogo = pw.MemoryImage((await rootBundle.load('assets/logo-3.png')).buffer.asUint8List());

    doc = pw.Document();
    doc.addPage(
      pw.MultiPage(
        footer: (ct) => pw.Center(
            child: pw.Padding(
                padding: const pw.EdgeInsets.all(4),
                child: pw.Column(children: [
                  pw.Text("Report generated by ML Supply Demand", style: const pw.TextStyle(fontSize: 8, color: PdfColor.fromInt(0))),
                  pw.Link(
                    child: pw.Text("https://github.com/JacKoal-a/sup_dem_simulator",
                        style: const pw.TextStyle(
                          decoration: pw.TextDecoration.underline,
                          fontSize: 8,
                          color: PdfColor.fromInt(0),
                        )),
                    destination: "https://github.com/JacKoal-a/sup_dem_simulator",
                  ),
                ]))),
        build: (ct) => [
          pw.Row(mainAxisAlignment: pw.MainAxisAlignment.spaceBetween, children: [
            pw.Text("${widget.model} Report",
                style: pw.TextStyle(fontSize: 16, color: PdfColor.fromInt(Theme.of(context).colorScheme.primary.value))),
            pw.Padding(padding: const pw.EdgeInsets.all(0.0), child: pw.Container(child: pw.Image(imageLogo), height: 50)),
          ]),
          pw.Divider(color: const PdfColor.fromInt(0)),
          pw.SizedBox(
            height: 10,
          ),
          pw.Table.fromTextArray(
              context: ct,
              data: widget.data,
              cellPadding: const pw.EdgeInsets.all(4),
              headerStyle:
                  pw.TextStyle(fontSize: 10, color: PdfColor.fromInt(Theme.of(context).colorScheme.primary.value), fontWeight: pw.FontWeight.bold)),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    if (widget.data.isNotEmpty) {
      _makePDF();
    }
    super.build(context);
    return Stack(
      children: [
        widget.data.isEmpty
            ? const Center(child: Text("Please choose a model and generate a report"))
            : PdfPreview(
                scrollViewDecoration: BoxDecoration(color: Theme.of(context).colorScheme.background),
                maxPageWidth: 700,
                useActions: false,
                build: (format) => doc.save(),
              ),
        Align(
          alignment: Alignment.bottomRight,
          child: Padding(
            padding: const EdgeInsets.all(24.0),
            child: FloatingActionButton(
              onPressed: widget.data.isEmpty ? () {} : _savePDF,
              child: const Icon(Icons.download),
            ),
          ),
        ),
      ],
    );
  }

  Future<void> _savePDF() async {
    String? outputFile = await FilePicker.platform.saveFile(
      dialogTitle: 'Please select an output file:',
      fileName: 'output-file.pdf',
      type: FileType.custom,
      allowedExtensions: ['pdf'],
    );

    if (outputFile != null) {
      final file = File(outputFile);
      file.writeAsBytes(await doc.save());
    }
  }

  @override
  bool get wantKeepAlive => true;
}
